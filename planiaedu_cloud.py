# ==============================================================================
# PlanIA Edu ‚Äì Asistente Pedag√≥gico con Inteligencia Artificial
# Desarrollado por: Ing. Marco Enrique Almeida Pacheco
# Proyecto de titulaci√≥n de la Maestr√≠a en Tecnolog√≠a e Innovaci√≥n Educativa
# Universidad de Guayaquil ‚Äì Facultad de Filosof√≠a
# Fecha de entrega: Junio 2025
# ==============================================================================
# üîπ Librer√≠as est√°ndar de Python
import os
import io
import json
import time
from datetime import datetime
from re import findall

# üî∏ Librer√≠as externas
import streamlit as st
import openai
from PIL import Image
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import Image as ReportLabImage

openai.api_key = st.secrets["OPENAI_API_KEY"]
# Verificaci√≥n temprana de API Key
if not openai.api_key or not openai.api_key.startswith("sk-"):
    st.error("üîê Error: No se ha configurado correctamente la clave de OpenAI. Por favor, revisa la secci√≥n de 'Secrets' en Streamlit Cloud.")
    st.stop()

# ----------------------------------------------------------------------
# Funci√≥n: consulta_openai(prompt)
# Descripci√≥n: Env√≠a un mensaje (prompt) al modelo GPT-3.5-turbo de OpenAI
#              y devuelve la respuesta generada por la IA.
# Par√°metros:
#   - prompt (str): Texto de entrada con la solicitud del usuario.
# Retorna:
#   - str: Contenido de la respuesta generada por la IA.
# ----------------------------------------------------------------------
def consulta_openai(prompt):
    try:
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=1000
        )
        return respuesta.choices[0].message.content.strip()
    except openai.error.AuthenticationError:
        return "‚ö†Ô∏è Error de autenticaci√≥n con OpenAI. Verifica tu clave API."
    except openai.error.RateLimitError:
        return "‚ö†Ô∏è Se ha superado el l√≠mite de uso de la API. Intenta m√°s tarde."
    except openai.error.OpenAIError as e:
        return f"‚ö†Ô∏è Error al conectar con OpenAI: {str(e)}"
    except Exception as e:
        return f"‚ö†Ô∏è Error inesperado: {str(e)}"

# Configuraci√≥n inicial
st.set_page_config(page_title="PlanIA Edu - Asistente Pedag√≥gico", layout="centered")

# Inyecta estilo CSS personalizado
st.markdown("""
    <style>
        body {
            background-color: #f9f9f9;
            font-family: 'Segoe UI', sans-serif;
        }
        .chat-message {
            padding: 12px 16px;
            margin: 6px 0;
            border-radius: 10px;
            max-width: 75%;
            line-height: 1.4;
        }
        .user { background-color: #DCF8C6; margin-left: auto; text-align: right; }
        .bot { background-color: #eef2f6; margin-right: auto; text-align: left; }

        .plan-card {
            background-color: #ffffff;
            border: 1px solid #ddd;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        }

        .btn-plan {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
        }

        .btn-plan:hover {
            background-color: #0056b3;
        }

        .header-title {
            font-size: 2rem;
            font-weight: bold;
            color: #1f2937;
            text-align: center;
            margin-bottom: 1rem;
        }

        .sub-header {
            font-size: 1.1rem;
            color: #4b5563;
            text-align: center;
            margin-bottom: 2rem;
        }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo bonito
st.markdown('<div class="header-title">üß† PlanIA Edu</div>', unsafe_allow_html=True)
st.markdown('<div class="sub-header">Asistente Pedag√≥gico con Inteligencia Artificial</div>', unsafe_allow_html=True)

# Mostrar introducci√≥n animada solo una vez
if "introduccion_completa" not in st.session_state:
    st.markdown(
        """
        <div style="text-align: center; font-size: 24px; color: #333;">
            <strong>Cargando PlanIA Edu...</strong>
        </div>
        """,
        unsafe_allow_html=True,
    )
    progress_bar = st.progress(0)
    for i in range(100):
        progress_bar.progress(i + 1)
        time.sleep(0.02)  # Simula progreso lento
    st.empty()
    st.session_state.introduccion_completa = True

# API Key ‚Äì En producci√≥n usa variables de entorno


# Inicializa el estado de la sesi√≥n en Streamlit si es la primera vez que se carga la app
# Estado de sesi√≥n
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": "Eres PlanIA Edu, un asistente pedag√≥gico para docentes universitarios."}
    ]
    st.session_state.step = "inicio"
    st.session_state.respuestas = {}
    
# ----------------------------------------------------------------------
# Funci√≥n: send_message(role, content)
# Descripci√≥n: Agrega un mensaje al historial de conversaci√≥n de la sesi√≥n.
# Par√°metros:
#   - role (str): Rol del emisor del mensaje ('user' o 'bot').
#   - content (str): Contenido textual del mensaje.
# ----------------------------------------------------------------------
def send_message(role, content):
    st.session_state.messages.append({"role": role, "content": content})

# ----------------------------------------------------------------------
# Funci√≥n: finalizar_planificacion()
# Descripci√≥n: Cierra el flujo del asistente mostrando un mensaje de √©xito
#              y activa la opci√≥n para descargar la planificaci√≥n en PDF.
# ----------------------------------------------------------------------
def finalizar_planificacion():
    st.session_state.respuestas.clear()
    st.session_state.messages = [{"role": "system", "content": "Eres PlanIA Edu, un asistente pedag√≥gico para docentes universitarios."}]
    st.session_state.step = "inicio"
    
def limpiar_valor(valor):
    valor = str(valor).strip()
    if valor.lower() in ["cr√©alos t√∫","cr√©alos tu", "crealos tu", "no s√©","no se", "ok", "s√≠", "si", "no", "", " ", "ninguno"]:
        return "No especificado"
    return valor

# ----------------------------------------------------------------------
# Funci√≥n: generar_pdf(respuestas)
# Descripci√≥n: Genera un documento PDF con el contenido de una planificaci√≥n
#              pedag√≥gica, a partir de las respuestas recopiladas por el sistema.
#              Utiliza ReportLab para construir la estructura y formato del documento.
# Par√°metros:
#   - respuestas (dict): Diccionario con los campos completados durante el flujo del asistente.
# Retorna:
#   - buffer (BytesIO): Objeto en memoria con el PDF generado listo para descarga.
# ----------------------------------------------------------------------
def generar_pdf(respuestas):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=50, leftMargin=50, topMargin=50, bottomMargin=50)
    styles = getSampleStyleSheet()
    story = []

    # Estilos personalizados
    styles.add(ParagraphStyle(name='Titulo', fontSize=16, leading=22, textColor="#bd1c35", spaceAfter=10))
    styles.add(ParagraphStyle(name='Subtitulo', fontSize=12, leading=16, textColor="#447ac7", spaceBefore=12, spaceAfter=6))
    styles.add(ParagraphStyle(name='Cuerpo', fontSize=12, leading=18, spaceBefore=6, spaceAfter=12))

    # Agregar logo si existe
    if os.path.exists("assets/logo.png"):
        logo = ReportLabImage("assets/logo.png", width=150, height=60)
        story.append(logo)
        story.append(Spacer(1, 0.3 * inch))

    # T√≠tulo principal
    story.append(Paragraph("PlanIA Edu - Planificaci√≥n Pedag√≥gica", styles['Titulo']))
    story.append(Spacer(1, 0.2 * inch))

    # Informaci√≥n general
    story.append(Paragraph("Datos de la planificaci√≥n:", styles['Subtitulo']))
    datos_principales = {
        "Nombre del docente": respuestas.get('docente_nombre', 'Sin nombre'),
        "Asignatura": respuestas.get('asignatura', 'No especificado'),
        "Tema": respuestas.get('tema', 'No especificado'),
        "Duraci√≥n": respuestas.get('duracion_clase', 'No especificado')
    }
    for label, val in datos_principales.items():
        story.append(Paragraph(f"<strong>{label}:</strong> {val}", styles['Cuerpo']))

    story.append(Spacer(1, 0.2 * inch))

    # Mapeo de claves a nombres legibles (ya corregidos)
    label_mapping = {
        "area_conocimiento": "√Årea de conocimiento",
        "nivel_academico": "Nivel acad√©mico",
        "tipo_materia": "Tipo de materia",
        "experiencia_docente": "Experiencia docente",
        "frecuencia_tecno": "Frecuencia de uso de tecnolog√≠as educativas",
        "tipo_clase": "Tipo de clase",
        "objetivos": "Objetivos de aprendizaje",
        "nivel_tecnologico": "Nivel de conocimientos tecnol√≥gicos",
        "herramientas": "Herramientas IA recomendadas",
        "actividades": "Actividades did√°cticas",
        "recomendaciones": "Recomendaciones √©ticas"
    }

    # Agregar cada campo al PDF
    from re import findall

    for key, label in label_mapping.items():
        value = limpiar_valor(respuestas.get(key, ""))
        if value == "No especificado":
            continue

        story.append(Paragraph(f"<strong>{label}:</strong>", styles['Subtitulo']))
        lines = value.split('\n')
        for line in lines:
            if line.strip():
                story.append(Paragraph(line.strip(), styles['Cuerpo']))
        story.append(Spacer(1, 0.1 * inch))

    # Tabla de actividades (si existen)
    if "actividades" in respuestas and respuestas["actividades"] != "No especificado":
        story.append(Paragraph("<strong>Bloques de tiempo sugeridos:</strong>", styles['Subtitulo']))
        bloques = []
        bloque_lines = [linea.strip() for linea in respuestas["actividades"].split('\n') if "bloque" in linea.lower()]

        for linea in bloque_lines:
            bloque_match = findall(r"Bloque (\d+).*?(\d+ minutos).*?:.*?(.*)", linea)
            if bloque_match:
                num_bloque, duracion, descripcion = bloque_match[0]
                bloques.append([f"Bloque {num_bloque} ({duracion})", descripcion[:100] + "..."])

        if bloques:
            data = [["Bloque", "Actividad"]]
            data += bloques
            t = Table(data)
            t.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), "#447ac7"),
                ('TEXTCOLOR', (0, 0), (-1, 0), "#ffffff"),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), "#f9f9f9"),
                ('GRID', (0, 0), (-1, -1), 1, "#cccccc")
            ]))
            story.append(t)
            story.append(Spacer(1, 0.2 * inch))

    # Pie de p√°gina
    story.append(Spacer(1, 0.3 * inch))
    story.append(Paragraph("<font color='#bcc2d0' size='8'>¬© PlanIA Edu - Asistente Pedag√≥gico con IA</font>",
                           styles['Normal']))

    # Construir PDF
    
    story.append(Spacer(1, 0.3 * inch))
    story.append(Paragraph("<font size='10'>---<br/>Este documento fue generado autom√°ticamente por la herramienta<br/><strong>üìò PlanIA Edu - Asistente Pedag√≥gico con IA</strong><br/>Desarrollado por Marco Almeida Pacheco ‚Äì 2025</font>", styles['Normal']))

    doc.build(story)
    pdf = buffer.getvalue()
    buffer.close()
    return pdf

# Mostrar mensajes del chat
for msg in st.session_state.messages:
    if msg["role"] == "assistant":
        st.markdown(f'<div class="bot chat-message"><strong>üß† PlanIA:</strong> {msg["content"]}</div>', unsafe_allow_html=True)
    elif msg["role"] == "user":
        st.markdown(f'<div class="user chat-message"><strong>üë§ T√∫:</strong> {msg["content"]}</div>', unsafe_allow_html=True)

# Mostrar historial de planificaciones

# Flujo conversacional
steps = [
    "inicio", "asignatura", "tema", "duracion_clase", 
    "area_conocimiento", "nivel_academico", "tipo_materia",
    "experiencia_docente", "frecuencia_tecno", "tipo_clase", 
    "objetivos", "nivel_tecnologico", "herramientas", "actividades", "recomendaciones"
]

step_index = steps.index(st.session_state.step) if st.session_state.step in steps else 0

# Paso 0: Bienvenida e identificaci√≥n del docente
# Muestra mensaje inicial, solicita el nombre y configura el siguiente paso tras hacer clic en "Comenzar"
if step_index == 0:
    st.markdown("üëã ¬°Hola! Soy **PlanIA Edu**, tu asistente pedag√≥gico.")
    st.markdown("Voy a ayudarte a planificar tus clases universitarias con inteligencia artificial.")
    st.markdown("¬øC√≥mo te llamas?")
    user_input = st.text_input("Tu nombre")

    # Pie de firma institucional (dentro del bloque if)
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; font-size: 13px;'>"
        "Desarrollado por <strong>Ing. Marco Almeida Pacheco</strong> (Junio 2025)<br/>"
        "<em>Trabajo de titulaci√≥n de la Maestr√≠a en Tecnolog√≠a e Innovaci√≥n Educativa - Universidad de Guayaquil</em><br/>"
        "<em>Validado en la Facultad de Ciencias de la Salud - UCSG</em>"
        "</div>",
        unsafe_allow_html=True
    )

    if st.button("Comenzar"):
        st.session_state.respuestas["docente_nombre"] = user_input
        send_message("bot", f"¬°Bienvenido/a, {user_input}! üéì")
        send_message("bot", "¬øCu√°l es la asignatura que imparte?")
        st.session_state.step = "asignatura"
        st.rerun()

# Paso 1: Solicita el nombre de la asignatura que imparte el docente
# Luego avanza al siguiente paso para conocer el objetivo de aprendizaje
elif step_index == 1:
    st.markdown("üéì ¬øCu√°l es la asignatura que impartes?")
    user_input = st.text_input("Asignatura")
    if st.button("Siguiente"):
        st.session_state.respuestas["asignatura"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øSobre qu√© tema espec√≠fico trabajar√° esta clase?")
        st.session_state.step = "tema"
        st.rerun()

# Paso 2: Solicita el objetivo de aprendizaje de la clase
# Esta informaci√≥n ser√° utilizada por la IA para contextualizar la planificaci√≥n
elif step_index == 2:
    st.markdown("üìò ¬øCu√°l es el tema central de tu clase?")
    st.markdown("üí° Ejemplo: Ecuaciones cuadr√°ticas, C√©lulas eucariotas...")
    user_input = st.text_input("Tema de la clase")
    if st.button("Siguiente"):
        st.session_state.respuestas["tema"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øCu√°nto tiempo durar√° la clase? Ejemplo: 45 minutos, 1 hora")
        st.session_state.step = "duracion_clase"
        st.rerun()

# Paso 3: Solicita los temas o contenidos que se abordar√°n en la clase
# Esta informaci√≥n se usar√° para generar las actividades y materiales pertinentes
elif step_index == 3:
    st.markdown("üïí ¬øCu√°nto tiempo durar√° la clase?")
    st.markdown("üí° Ejemplo: 45 minutos, 90 minutos, 2 horas, ...")
    user_input = st.text_input("Duraci√≥n de la clase")
    if st.button("Siguiente"):
        st.session_state.respuestas["duracion_clase"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øCu√°l es el √°rea de conocimiento?")
        st.markdown("üìå Opciones: Educaci√≥n, Ciencias de la Salud, Ingenier√≠a y Tecnolog√≠a, Ciencias Sociales, Artes y Humanidades, Otro")
        st.session_state.step = "area_conocimiento"
        st.rerun()

# Paso 4: Selecci√≥n del √°rea de conocimiento
# Permite contextualizar la planificaci√≥n seg√∫n la disciplina acad√©mica del docente
elif step_index == 4:
    st.markdown("üéì Selecciona el √°rea de conocimiento.")
    user_input = st.selectbox("√Årea de conocimiento", [
        "Educaci√≥n", "Ciencias de la Salud", "Ingenier√≠a y Tecnolog√≠a",
        "Ciencias Sociales", "Artes y Humanidades", "Otro"
    ])
    if st.button("Siguiente"):
        st.session_state.respuestas["area_conocimiento"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øCu√°l es el nivel acad√©mico? (T√©cnico / Pregrado / Posgrado)")
        st.markdown("üìò **Gu√≠a:** Selecciona el nivel educativo al que est√° dirigida esta clase:")
        st.markdown("- **T√©cnico**: Programas de formaci√≥n t√©cnica profesional o tecnol√≥gica.")
        st.markdown("- **Pregrado**: Carreras universitarias como licenciaturas e ingenier√≠as.")
        st.markdown("- **Posgrado**: Maestr√≠as, especializaciones y doctorados.")
        st.session_state.step = "nivel_academico"
        st.rerun()



# Paso 5: Selecci√≥n del nivel acad√©mico
# Define el nivel educativo al que est√° dirigida la planificaci√≥n (ej. pregrado, posgrado)
elif step_index == 5:
    st.markdown("üí° Selecciona el nivel acad√©mico que corresponde con la planificaci√≥n de tu clase.")
    user_input = st.selectbox("Nivel acad√©mico", ["T√©cnico", "Pregrado", "Grado", "Posgrado"])
    if st.button("Siguiente"):
        st.session_state.respuestas["nivel_academico"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øQu√© tipo de materia es? (Te√≥rica / Pr√°ctica / Mixta)")
        st.session_state.step = "tipo_materia"
        st.rerun()

# Paso 6: Tipo de materia (te√≥rica, pr√°ctica o mixta)
# Permite adaptar la planificaci√≥n seg√∫n la naturaleza del enfoque pedag√≥gico de la clase
elif step_index == 6:
    st.markdown("üìò Selecciona si tu clase es de tipo te√≥rico, pr√°ctico o una combinaci√≥n de ambos.")
    st.markdown("üîé **Te√≥rica**: Clases centradas en el desarrollo conceptual, fundamentaci√≥n acad√©mica y exposici√≥n de contenidos.")
    st.markdown("üî¨ **Pr√°ctica**: Clases orientadas a la aplicaci√≥n directa, ejercicios, laboratorios o simulaciones.")
    st.markdown("‚öñÔ∏è **Mixta**: Combina exposici√≥n te√≥rica con actividades pr√°cticas complementarias.")
    user_input = st.selectbox("Tipo de materia", ["Te√≥rica", "Pr√°ctica", "Mixta"])
    if st.button("Siguiente"):
        st.session_state.respuestas["tipo_materia"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øCu√°l es tu nivel de experiencia docente? (Principiante / Intermedio / Avanzado)")
        st.session_state.step = "experiencia_docente"
        st.rerun()

# Paso 7: Nivel de experiencia docente
# Recoge la trayectoria profesional del usuario como docente para ajustar el enfoque de la planificaci√≥n
elif step_index == 7:
    st.markdown("üßë‚Äçüè´ Selecciona el nivel que m√°s se ajuste a tu trayectoria como docente.")
    st.markdown("üßæ Principiante: <1 a√±o‚ÄÉ|‚ÄÉIntermedio: 1-10 a√±os‚ÄÉ|‚ÄÉAvanzado: >10 a√±os")
    user_input = st.selectbox("Nivel de experiencia docente", ["Principiante", "Intermedio", "Avanzado"])
    if st.button("Siguiente"):
        st.session_state.respuestas["experiencia_docente"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øC√≥mo calificar√≠as tu frecuencia de uso de tecnolog√≠as educativas? (Bajo / Medio / Alto)")
        st.session_state.step = "frecuencia_tecno"
        st.rerun()

# Paso 8: Frecuencia de uso de tecnolog√≠as educativas
# Recoge el nivel de familiaridad del docente con herramientas digitales para adaptar la planificaci√≥n
elif step_index == 8:
    st.markdown("üí° Se√±ala con qu√© frecuencia utilizas herramientas digitales o plataformas educativas.")
    st.markdown("üì∂ Bajo: Uso ocasional‚ÄÉ|‚ÄÉMedio: Uso regular‚ÄÉ|‚ÄÉAlto: Uso intensivo o cotidiano")
    user_input = st.selectbox("Frecuencia de uso de tecnolog√≠as educativas", ["Bajo", "Medio", "Alto"])
    if st.button("Siguiente"):
        st.session_state.respuestas["frecuencia_tecno"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øQu√© tipo de clase tienes? (Presencial / Virtual / H√≠brida / Semipresencial / A distancia)")
        st.session_state.step = "tipo_clase"
        st.rerun()

# Paso 9: Tipo de clase
# Permite identificar la modalidad de ense√±anza (presencial, virtual, h√≠brida, etc.) para contextualizar la planificaci√≥n
elif step_index == 9:
    st.markdown("üè´ Selecciona la modalidad que corresponde al entorno en que impartes tu clase.")
    st.markdown("üìö Presencial: En aula f√≠sica‚ÄÉ|‚ÄÉVirtual: Completamente en l√≠nea‚ÄÉ|‚ÄÉH√≠brida: Combina presencial y virtual‚ÄÉ|‚ÄÉSemipresencial: Mayormente presencial, algunas sesiones virtuales‚ÄÉ|‚ÄÉA distancia: Sincr√≥nica o asincr√≥nica, sin presencia f√≠sica")
    user_input = st.selectbox("Tipo de clase", [
        "Presencial", "Virtual", "H√≠brida", "Semipresencial", "A distancia"
    ])
    if st.button("Siguiente"):
        st.session_state.respuestas["tipo_clase"] = user_input
        send_message("user", user_input)
        send_message("bot", "¬øCu√°les son los objetivos de aprendizaje de esta clase?")
        st.markdown("‚úèÔ∏è Puedes redactar tus propios objetivos o dejar que el asistente los proponga autom√°ticamente.")
        st.markdown("üß† Si escribes frases como **'cr√©alos t√∫'**, **'sugi√©relos'**, o incluso lo dejas vac√≠o, PlanIA Edu generar√° objetivos pedag√≥gicos adecuados para tu asignatura.")
        st.markdown("üí° Ejemplo de objetivo redactado: 'Al finalizar la clase, los estudiantes deber√°n ser capaces de resolver funciones l√≥gicas aplicadas en programaci√≥n.'")
        st.session_state.step = "objetivos"
        st.rerun()


# Paso 10: Objetivos de aprendizaje
# El docente puede ingresar sus objetivos o solicitar que la IA los genere autom√°ticamente seg√∫n la asignatura y el tema.
# Se procesan expresiones comunes que indican delegaci√≥n al asistente (ej. "sugi√©relos", "cr√©alos t√∫", etc.).
elif step_index == 10:
    st.markdown("üéØ Escribe tus objetivos o deja que el asistente los genere autom√°ticamente.")
    st.markdown("üìå Si escribes frases como 'cr√©alos t√∫', 'sugi√©relos' o dejas el campo vac√≠o, se generar√°n sugerencias.")
    st.markdown("üí° Ejemplo: 'Al finalizar la clase, los estudiantes deber√°n ser capaces de analizar textos cient√≠ficos en ingl√©s t√©cnico.'")
    user_input = st.text_input("Objetivos de aprendizaje")
    if st.button("Siguiente"):
        asignatura = st.session_state.respuestas.get("asignatura", "")
        tema = st.session_state.respuestas.get("tema", "")

        if user_input.strip().lower() in ["cr√©alos t√∫","sugi√©relos", "cr√©alos tu", "crealos tu", "crealos t√∫", "no s√©","no se", "ok", "s√≠", "si", "no", "", " ", "ninguno"]:
            prompt = f"Sugiere 3 objetivos claros para una clase de '{asignatura}' sobre '{tema}', nivel universitario."
            try:
                obj_ia = openai.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
                user_input = obj_ia.choices[0].message.content.strip()
            except Exception as e:
                user_input = "1. Comprender el concepto de ecuaci√≥n cuadr√°tica.\n2. Aplicar m√©todos de resoluci√≥n paso a paso.\n3. Graficar funciones y analizar resultados."

        st.session_state.respuestas["objetivos"] = user_input.strip()
        send_message("user", user_input)
        send_message("bot", "¬øC√≥mo calificar√≠as tu nivel de familiaridad con herramientas digitales? (Bajo / Medio / Alto)")
        st.session_state.step = "nivel_tecnologico"
        st.rerun()

# Paso 11: Nivel de conocimientos tecnol√≥gicos
# Permite evaluar el dominio del docente sobre tecnolog√≠as digitales aplicadas a la ense√±anza.
# A partir de esta informaci√≥n, la IA sugiere 3 herramientas educativas adecuadas al contexto del usuario.
elif step_index == 11:
    st.markdown("üíª Selecciona tu nivel de dominio de tecnolog√≠as digitales aplicadas a la docencia.")
    st.markdown("üîç Bajo: Conocimientos b√°sicos‚ÄÉ|‚ÄÉMedio: Uso habitual de plataformas‚ÄÉ|‚ÄÉAlto: Dominio de herramientas avanzadas")
    user_input = st.selectbox("Nivel de conocimientos tecnol√≥gicos", ["Bajo", "Medio", "Alto"])
    if st.button("Siguiente"):
        st.session_state.respuestas["nivel_tecnologico"] = user_input
        send_message("user", user_input)

        # Generar herramientas con IA
        prompt = f"""
        Sugiere 3 herramientas de IA educativa adecuadas para una clase de '{st.session_state.respuestas.get("asignatura", "")}'
        sobre '{st.session_state.respuestas.get("tema", "")}', tipo de clase '{st.session_state.respuestas.get("tipo_clase", "")}',
        nivel tecnol√≥gico '{st.session_state.respuestas.get("nivel_tecnologico", "")}'
        """
        try:
            respuesta_ia = openai.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
            herramientas = respuesta_ia.choices[0].message.content.strip()
        except Exception as e:
            herramientas = "‚ö†Ô∏è Error al conectar con OpenAI."

        st.session_state.respuestas["herramientas"] = herramientas
        send_message("bot", herramientas)
        st.session_state.step = "herramientas"
        st.rerun()

# Paso 12: Generaci√≥n de actividades did√°cticas con IA
# El docente decide si desea recibir sugerencias autom√°ticas. Si responde "s√≠", la IA propone actividades
# estructuradas por bloques de tiempo usando las herramientas tecnol√≥gicas disponibles y los objetivos definidos.
elif step_index == 12:
    send_message("bot", "¬øDeseas que el asistente proponga actividades did√°cticas basadas en IA?")
    st.markdown("üõ†Ô∏è Decide si deseas que el asistente proponga actividades did√°cticas personalizadas usando IA.")
    st.markdown("‚úÖ Escribe **s√≠** si deseas sugerencias autom√°ticas, o **no** si prefieres proponerlas t√∫ mismo.")
    user_input = st.text_input("¬øDeseas actividades?")
    if st.button("Siguiente"):
        send_message("user", user_input)
        herramientas = st.session_state.respuestas.get("herramientas", "")
        objetivo = st.session_state.respuestas.get("objetivos", "ense√±ar conceptos b√°sicos")
        duracion = st.session_state.respuestas.get("duracion_clase", "1 hora")

        prompt = f"""
        Propon 2 o 3 actividades did√°cticas usando {herramientas} para lograr estos objetivos:
        {objetivo}

        La clase tiene una duraci√≥n total de {duracion}.
        Divide el tiempo en bloques claros y sugiere c√≥mo distribuirlos.
        Usa formato: 'Bloque X (Y minutos): Descripci√≥n breve'
        """
        try:
            respuesta_ia = openai.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
            actividades = respuesta_ia.choices[0].message.content.strip()
        except Exception as e:
            actividades = "‚ö†Ô∏è Error al generar actividades."

        st.session_state.respuestas["actividades"] = actividades
        send_message("bot", actividades)
        st.session_state.step = "actividades"
        st.rerun()

# Paso 13: Recomendaciones √©ticas sobre el uso de IA
# El docente decide si desea recibir sugerencias de buenas pr√°cticas √©ticas. Si responde "s√≠", la IA
# proporciona 3 recomendaciones para aplicar la inteligencia artificial de manera responsable en el aula.
elif step_index == 13:
    send_message("bot", "üìò Las buenas pr√°cticas √©ticas al usar IA ayudan a garantizar una educaci√≥n responsable.")
    st.markdown("üìò Las buenas pr√°cticas √©ticas al usar IA ayudan a garantizar una educaci√≥n responsable.")
    st.markdown("üß≠ Elige si deseas recibir sugerencias √©ticas para aplicar la inteligencia artificial en tu clase.")
    st.markdown("‚úÖ Escribe **s√≠** para recibirlas autom√°ticamente, o **no** si prefieres omitirlas.")
    user_input = st.text_input("¬øDeseas recomendaciones √©ticas?")
    if st.button("Finalizar"):
        send_message("user", user_input)
        prompt = "¬øCu√°les son 3 buenas pr√°cticas √©ticas al usar IA en la educaci√≥n universitaria?"
        try:
            respuesta_ia = openai.chat.completions.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
            recomendaciones = respuesta_ia.choices[0].message.content.strip()
        except Exception as e:
            recomendaciones = "‚ö†Ô∏è Error al obtener recomendaciones √©ticas."

        st.session_state.respuestas["recomendaciones"] = recomendaciones
        send_message("bot", recomendaciones)
        st.session_state.step = "recomendaciones"
        st.rerun()

# Paso 14: Recomendaciones finales y descarga del PDF
# Muestra el resumen completo de la planificaci√≥n generada, permite descargar el documento en PDF
# y ofrece la opci√≥n de iniciar una nueva planificaci√≥n docente.
elif step_index == 14:
    st.success("‚úÖ ¬°Tu planificaci√≥n est√° lista!")
    st.subheader("Resumen Final:")

    for key, value in st.session_state.respuestas.items():
        if key == "docente_nombre":
            st.markdown(f"- **Nombre del docente**: {limpiar_valor(value)}")
        else:
            st.markdown(f"- **{key.replace('_', ' ').title()}**: {limpiar_valor(value)}")

    pdf_content = generar_pdf(st.session_state.respuestas)

    st.markdown("üíæ **Antes de continuar, aseg√∫rate de descargar tu planificaci√≥n en PDF.**")
    st.markdown("_Este documento no se guarda autom√°ticamente. Si deseas iniciar otra planificaci√≥n, puedes hacerlo despu√©s de descargar._")

    col1, col2 = st.columns([3, 1])
    with col1:
        st.download_button(
            label="üìÑ Descargar planificaci√≥n en PDF",
            data=pdf_content,
            file_name=f"planificacion_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            mime="application/pdf"
        )
    with col2:
        if st.button("üÜï Generar nueva planificaci√≥n"):
            finalizar_planificacion()
            st.rerun()
# Desarrollado por Ing. Marco Enrique Almeida Pacheco ‚Äì Junio 2025
